import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  private boolean debug = false;
  public boolean  debug()         {return debug;}
  public void     debug(boolean b){debug = b;}

  static class Node {
    public ArrayList<Node> children;
    private static int globalCounter = 0;

    public int counter;
    private Object value;

    public Node(Object value){
      Node.globalCounter += 1;
      this.counter = Node.globalCounter;
      this.value = value;
      this.children = new ArrayList<Node>();
    }

    public void addChild(Node n){ children.add(n); }

    public String toString(){
      String ret = "";
      ret += String.format("%d [label=\"%s\"];\n",
                            counter, value.toString());
      for(Node n: children){
        ret += String.format("%d -> %d;\n", this.counter, n.counter);
        ret += n.toString();
      }
      return ret;
    }
  }

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public boolean syntaxErrors;
     public void syntax_error(Symbol current_token) {
         report_error(
             "Syntax error at line " + (current_token.left+1) + ", column "
     + current_token.right, null
         );
     }

:};

terminal MAIN , RETURN, DEFINE_F, DEFINE_TYPE;
terminal ALIAS, IF, FI, THEN, ELSE, TOP, READ_INPUT, IN, PRINT, POOL, LOOP, BREAK;
terminal CONCATENATE, ADDITION, SUBSTRACTION, MULTIPLY, DIVIDE, EXP, INF_OR_EQUAL, EQUAL, DIFFERENT, NEGATION, AND, OR, IMPLICATION;
terminal BOOL, INTEGER, RAT, FLOAT, CHARACTER,  DICTIONARY_LIST, SEQUENCE_LIST, INTERROGATION, LEN, UNDERSCORE;
terminal IDENTIFIER, VALUES_OF_INTEGER, VALUES_OF_FLOAT, VALUES_OF_RAT, TRUE, FALSE, VALUES_OF_CHARACTER, VALUES_OF_STRING;
terminal SEMICOLON, COMMA, ASSIGNMENT, COLON, DOT, LC_BRACKET, RC_BRACKET, L_BRACKET, R_BRACKET, LSQ_BRACKET, RSQ_BRACKET, INFERIOR, SUPERIOR;

non terminal z_program, main_function, body_block, rat_number, float_number, int_;
non terminal type_number, type_list, type_other;
non terminal values_number,values, values_boolean, variable, ivar_ext, objects, var_declare, var_declares;
non terminal many_declarations, declaration, var_declare_group, functions,declare_func,function_header, statement_blocks, declare, many_declares, alias, type_definition, type;
non terminal expression, many_expressions, many_statements, statement, assignment;
non terminal input, output, function_call, loopifthenelse, ret;
non terminal boolean_operators, mathematical_operators, other_operators ;
non terminal index, operators, neg_substract, sequence;
non terminal dictionary, dictionary_content_opt, dict_rec, dictionary_content;

precedence left AND, OR, IMPLICATION, DIVIDE, EXP, IN, CONCATENATE, INFERIOR, INF_OR_EQUAL,ADDITION, SUBSTRACTION, MULTIPLY, EQUAL,DIFFERENT,DOT, LSQ_BRACKET,RSQ_BRACKET, L_BRACKET;


z_program ::= many_declarations main_function many_declarations;

main_function ::= MAIN body_block SEMICOLON;

type ::= type_number
    |  type_list
    |  type_other
    |   IDENTIFIER;

type_number ::= int_
               | RAT
               | FLOAT;

int_ ::= INTEGER
      | type_number UNDERSCORE INTEGER;

rat_number ::= int_ DIVIDE int_
            | SUBSTRACTION int_ DIVIDE int_;

float_number ::= int_ DOT int_
              | SUBSTRACTION int_ DOT int_;

type_list ::=  DICTIONARY_LIST INFERIOR type COMMA type SUPERIOR
                  | SEQUENCE_LIST INFERIOR type SUPERIOR;

type_other ::=  BOOL
                |  CHARACTER
                |   TOP;

values_number ::= VALUES_OF_INTEGER
    | SUBSTRACTION VALUES_OF_INTEGER
    | VALUES_OF_FLOAT
    | SUBSTRACTION VALUES_OF_FLOAT
    | VALUES_OF_RAT
    | SUBSTRACTION VALUES_OF_RAT;

values_boolean ::= TRUE
               |   FALSE;

values ::= values_boolean
    | values_number
    | VALUES_OF_STRING
    | VALUES_OF_CHARACTER;

variable ::= IDENTIFIER
    | IDENTIFIER ivar_ext;

ivar_ext ::= DOT variable
    | LSQ_BRACKET index RSQ_BRACKET ivar_ext
    | LSQ_BRACKET index RSQ_BRACKET
    | LSQ_BRACKET expression RSQ_BRACKET ivar_ext
    | LSQ_BRACKET expression RSQ_BRACKET;

objects ::= IDENTIFIER
    | IDENTIFIER ivar_ext
    | L_BRACKET expression R_BRACKET
    | objects DOT IDENTIFIER
    | function_call
    | objects LSQ_BRACKET index RSQ_BRACKET
    | objects LSQ_BRACKET expression RSQ_BRACKET
    | sequence
    | dictionary;

index ::= expression COLON expression
    | COLON expression
    | expression COLON;

declaration ::= type_definition SEMICOLON
    | functions SEMICOLON
    | alias SEMICOLON
    | var_declares;

many_declarations ::= declaration many_declarations
    | ; //empty

body_block ::= LC_BRACKET statement_blocks RC_BRACKET;

statement_blocks ::= many_declares many_statements
    | many_declares
    | many_statements
    | BREAK SEMICOLON
    | BREAK values SEMICOLON;

declare_func ::= function_header body_block;

functions ::= declare_func
    |   declare_func COLON type;

declare ::= var_declares
    | alias SEMICOLON
    | functions SEMICOLON
    | type_definition SEMICOLON;

many_declares  ::= declare
    | many_declares declare;

type_definition ::= DEFINE_TYPE IDENTIFIER LC_BRACKET var_declare_group RC_BRACKET ;

function_header ::= DEFINE_F IDENTIFIER L_BRACKET var_declare_group R_BRACKET
    |   DEFINE_F IDENTIFIER L_BRACKET R_BRACKET;

alias ::= ALIAS type type;

var_declare ::= IDENTIFIER COLON type;

var_declare_group ::= var_declare
    |   var_declare_group COMMA var_declare;

var_declares ::= var_declare SEMICOLON
    | var_declare ASSIGNMENT many_expressions SEMICOLON;

ret ::= RETURN expression SEMICOLON
    |   RETURN SEMICOLON;

function_call ::= IDENTIFIER L_BRACKET many_expressions R_BRACKET
                   | INTERROGATION IDENTIFIER INTERROGATION IDENTIFIER L_BRACKET many_expressions R_BRACKET
                   | INTERROGATION values_boolean INTERROGATION IDENTIFIER L_BRACKET many_expressions R_BRACKET
                   | IDENTIFIER L_BRACKET  R_BRACKET
                   | INTERROGATION IDENTIFIER INTERROGATION IDENTIFIER L_BRACKET  R_BRACKET
                   | INTERROGATION values_boolean INTERROGATION IDENTIFIER L_BRACKET  R_BRACKET;

assignment ::= variable ASSIGNMENT many_expressions;

many_expressions ::= expression
             | expression COMMA many_expressions;

many_statements ::= statement
            | statement many_statements;

statement ::= input SEMICOLON
           | assignment SEMICOLON
           | output SEMICOLON
           | function_call SEMICOLON
           | loopifthenelse
           | ret;

input ::= READ_INPUT variable;

output ::= PRINT expression;

loopifthenelse ::= IF L_BRACKET expression R_BRACKET THEN statement_blocks FI
               | IF L_BRACKET expression R_BRACKET THEN statement_blocks ELSE statement_blocks FI
               | LOOP many_statements POOL;


expression ::= values
            | objects
            | expression operators expression
            | neg_substract expression
            | IDENTIFIER DOT LEN
            | expression DOT LEN;

operators ::= boolean_operators
             | mathematical_operators
             | other_operators;


boolean_operators ::= AND
                       | OR
                       | INFERIOR
                       | INF_OR_EQUAL
                       | EQUAL
                       | DIFFERENT;

mathematical_operators ::= ADDITION
                         | SUBSTRACTION
                         | MULTIPLY
                         | DIVIDE
                         | EXP;

other_operators ::= IMPLICATION
                   | IN
                   | CONCATENATE;


neg_substract ::= NEGATION
            | SUBSTRACTION;

sequence ::= LSQ_BRACKET many_expressions RSQ_BRACKET
            |   LSQ_BRACKET RSQ_BRACKET;

dictionary ::= LC_BRACKET dict_rec RC_BRACKET
            | LC_BRACKET RC_BRACKET;

dict_rec ::= dictionary_content COMMA dict_rec
            | dictionary_content;

dictionary_content ::= expression COLON expression;